{"version":3,"sources":["App.js","index.js"],"names":["process","REACT_APP_API_KEY","REACT_APP_API_URL","url","concat","join","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","state","contacts","contactTags","geoAddresses","geoIps","deals","tags","contactAvatar","_ref","firstName","lastName","contactName","_ref2","contactValue","contact","reduce","acc","dealId","deal","find","_ref3","id","Number","value","contactLocations","geoIp","geoIpObject","_ref4","geoAddressId","geoAddress","_this$state$geoAddres","_ref5","city","country2","push","map","contactTag","tagId","_ref6","tag","_ref7","hydrate","fetchContacts","setState","console","error","_context","t0","_this2","react_default","a","createElement","className","length","i","key","aria-hidden","toLocaleString","Component","fetch","method","headers","Api-Token","x-requested-with","Content-Type","catch","then","res","json","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.76de1c21.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.sass';\n\nconst { REACT_APP_API_KEY, REACT_APP_API_URL } = process.env;\n\nconst sideloadArgs = ['deals', 'geoIps.geoAddress', 'contactTags.tag'];\nconst limit = 100;\n\nconst url = `${REACT_APP_API_URL}?include=${[\n  sideloadArgs.join(','),\n]}&limit=${limit}`;\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    contactTags: [],\n    geoAddresses: [],\n    geoIps: [],\n    deals: [],\n    tags: [],\n  };\n\n  constructor() {\n    super(...arguments);\n\n    this.hydrate();\n  }\n\n  static fetchContacts = () =>\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        // Ideally REACT_APP_API_KEY would be provided by some sort of session\n        // broker, but that is out of scope for this project.\n        'Api-Token': REACT_APP_API_KEY,\n        'x-requested-with': 'xhr',\n        'Content-Type': 'application/json',\n      },\n    })\n      .catch(() => {})\n      .then(res => res.json());\n\n  async hydrate() {\n    try {\n      const {\n        contacts,\n        contactTags,\n        geoAddresses,\n        geoIps,\n        deals,\n        tags,\n      } = await App.fetchContacts();\n\n      this.setState({\n        contacts,\n        contactTags,\n        geoAddresses,\n        geoIps,\n        deals,\n        tags,\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  /**\n   * @param {Object} contact\n   * @returns {string}\n   */\n  contactAvatar = ({ firstName, lastName }) => {\n    return firstName && lastName ? `${firstName[0]}${lastName[0]}` : '';\n  };\n\n  /**\n   * @param {Object} contact\n   * @returns {string}\n   */\n  contactName = ({ firstName, lastName }) => {\n    return firstName || lastName ? `${firstName} ${lastName}` : '-';\n  };\n\n  /**\n   * @param {Object} contact\n   * @returns {number}\n   */\n  contactValue = contact =>\n    contact.deals.reduce((acc, dealId) => {\n      const deal = this.state.deals.find(({ id }) => id === dealId);\n\n      return deal ? acc + Number(deal.value) : 0;\n    }, 0) / 100;\n\n  /**\n   * @param {Object} contact\n   * @returns {Array.<string>}\n   */\n  contactLocations = contact =>\n    contact.geoIps.reduce((acc, geoIp) => {\n      const geoIpObject = this.state.geoIps.find(({ id }) => id === geoIp);\n\n      if (geoIpObject) {\n        const { geoAddress: geoAddressId } = geoIpObject;\n\n        const { city, state, country2 } = this.state.geoAddresses.find(\n          ({ id }) => id === geoAddressId\n        );\n\n        acc.push([city, state, country2].join(', '));\n      }\n\n      return acc;\n    }, []);\n\n  /**\n   * @param {Object} contact\n   * @returns {Array.<string>}\n   */\n  contactTags = contact =>\n    (contact.contactTags || []).map(contactTag => {\n      const { tag: tagId } = this.state.contactTags.find(\n        ({ id }) => id === contactTag\n      );\n      const { tag } = this.state.tags.find(({ id }) => id === tagId);\n\n      return tag;\n    });\n\n  render() {\n    const {\n      state: { contacts },\n    } = this;\n\n    return (\n      <div className=\"App\">\n        {!contacts.length && <p>Loading data, please wait...</p>}\n        <table>\n          <thead>\n            <tr>\n              <th>Contact</th>\n              <th>Total Value</th>\n              <th>Location</th>\n              <th>Deals</th>\n              <th>Tags</th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map((contact, i) => (\n              <tr key={i}>\n                <td className=\"name\">\n                  <span className=\"avatar\" aria-hidden=\"true\">\n                    {this.contactAvatar(contact)}\n                  </span>\n                  <span className=\"full-name\">{this.contactName(contact)}</span>\n                </td>\n                <td>${this.contactValue(contact).toLocaleString()}</td>\n                {/*\n                The use case for displaying multiple locations is unknown, so just display the first one.\n                */}\n                <td>{this.contactLocations(contact)[0] || '-'}</td>\n                <td className=\"deals\">{contact.deals.length}</td>\n                <td>{this.contactTags(contact).join(', ') || '-'}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport 'typeface-ibm-plex-sans';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}